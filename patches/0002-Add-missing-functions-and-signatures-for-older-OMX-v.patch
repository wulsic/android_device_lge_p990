From 93da1d76fead2b21514b33c6875c4a33e9abbf2f Mon Sep 17 00:00:00 2001
From: hjunii <hjunii@gmail.com>
Date: Mon, 16 Feb 2015 23:18:10 +0100
Subject: [PATCH 1/1] Add missing functions and signatures for older OMX video
 libs compat

Nvidia OMX libs need these to work
That fixes hardware OMX video codecs + Camera on P990

Change-Id: I3ca588934044d5eedb6be9008b9ca2557ca0290d
---
 include/media/AudioTrack.h     | 28 ++++++++++++++++++++--------
 media/libmedia/AudioSystem.cpp | 12 ++++++++++++
 media/libmedia/AudioTrack.cpp  | 41 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 73 insertions(+), 8 deletions(-)

diff --git a/include/media/AudioTrack.h b/include/media/AudioTrack.h
index b5256f0..ff52731 100644
--- a/include/media/AudioTrack.h
+++ b/include/media/AudioTrack.h
@@ -218,6 +218,18 @@ public:
                                     pid_t pid = -1,
                                     const audio_attributes_t* pAttributes = NULL);
 
+			// DEPRECATED
+			explicit AudioTrack( int streamType,
+				    uint32_t sampleRate  = 0,
+				    int format = AUDIO_FORMAT_DEFAULT,
+				    int channelMask      = 0,
+				    int frameCount       = 0,
+				    uint32_t flags       = (uint32_t) AUDIO_OUTPUT_FLAG_NONE,
+				    callback_t cbf       = 0,
+				    void* user           = 0,
+				    int notificationFrames = 0,
+				    int sessionId        = 0);
+
     /* Terminates the AudioTrack and unregisters it from AudioFlinger.
      * Also destroys all resources associated with the AudioTrack.
      */
@@ -263,28 +275,28 @@ public:
      * an uninitialized AudioTrack produces undefined results.
      * See set() method above for possible return codes.
      */
-            status_t    initCheck() const   { return mStatus; }
+            status_t    initCheck() const;
 
     /* Returns this track's estimated latency in milliseconds.
      * This includes the latency due to AudioTrack buffer size, AudioMixer (if any)
      * and audio hardware driver.
      */
-            uint32_t    latency() const     { return mLatency; }
+            uint32_t    latency() const;
 
     /* getters, see constructors and set() */
 
-            audio_stream_type_t streamType() const { return mStreamType; }
-            audio_format_t format() const   { return mFormat; }
+            audio_stream_type_t streamType() const;
+            audio_format_t format() const;
 
     /* Return frame size in bytes, which for linear PCM is
      * channelCount * (bit depth per channel / 8).
      * channelCount is determined from channelMask, and bit depth comes from format.
      * For non-linear formats, the frame size is typically 1 byte.
      */
-            size_t      frameSize() const   { return mFrameSize; }
+            size_t      frameSize() const;
 
-            uint32_t    channelCount() const { return mChannelCount; }
-            size_t      frameCount() const  { return mFrameCount; }
+            uint32_t    channelCount() const;
+            size_t      frameCount() const;
 
     /* Return the static buffer specified in constructor or set(), or 0 for streaming mode */
             sp<IMemory> sharedBuffer() const { return mSharedBuffer; }
@@ -468,7 +480,7 @@ public:
      * Returned value:
      *  AudioTrack session ID.
      */
-            int    getSessionId() const { return mSessionId; }
+            int    getSessionId() const;
 
     /* Attach track auxiliary output to specified effect. Use effectId = 0
      * to detach track from effect.
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
index dda3657..da1579a 100644
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -229,6 +229,12 @@ int AudioSystem::logToLinear(float volume)
     return volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
 }
 
+extern "C" status_t _ZN7android11AudioSystem21getOutputSamplingRateEPii(uint32_t* samplingRate, audio_stream_type_t streamType)
+{
+    return AudioSystem::getOutputFrameCount(samplingRate, streamType);
+}
+
+
 status_t AudioSystem::getOutputSamplingRate(uint32_t* samplingRate, audio_stream_type_t streamType)
 {
     audio_io_handle_t output;
@@ -286,6 +292,12 @@ status_t AudioSystem::getSamplingRate(audio_io_handle_t output,
     return NO_ERROR;
 }
 
+extern "C" status_t _ZN7android11AudioSystem19getOutputFrameCountEPii(size_t* frameCount, audio_stream_type_t streamType)
+{
+    return AudioSystem::getOutputFrameCount(frameCount, streamType);
+}
+
+
 status_t AudioSystem::getOutputFrameCount(size_t* frameCount, audio_stream_type_t streamType)
 {
     audio_io_handle_t output;
diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
index 0a89fbb..9a7e9ae 100644
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -51,6 +51,21 @@ static int64_t getNowUs()
 }
 
 // static
+
+uint32_t AudioTrack::latency() const { return mLatency; }
+audio_stream_type_t AudioTrack::streamType() const { return mStreamType; }
+audio_format_t AudioTrack::format() const  { return mFormat; }
+uint32_t AudioTrack::channelCount() const  { return mChannelCount; }
+uint32_t AudioTrack::frameCount() const  { return mFrameCount; }
+size_t AudioTrack::frameSize() const { return mFrameSize; }
+status_t AudioTrack::initCheck() const { return mStatus; }
+int AudioTrack::getSessionId() const { return mSessionId; }
+
+extern "C" int _ZNK7android10AudioTrack12getSessionIdEv();
+extern "C" int _ZN7android10AudioTrack12getSessionIdEv() {
+    return _ZNK7android10AudioTrack12getSessionIdEv();
+}
+
 status_t AudioTrack::getMinFrameCount(
         size_t* frameCount,
         audio_stream_type_t streamType,
@@ -110,6 +125,32 @@ status_t AudioTrack::getMinFrameCount(
 }
 
 // ---------------------------------------------------------------------------
+// DEPRECATED
+AudioTrack::AudioTrack(
+	int streamType,
+	uint32_t sampleRate,
+	int format,
+	int channelMask,
+	int frameCount,
+	uint32_t flags,
+	callback_t cbf,
+	void* user,
+	int notificationFrames,
+	int sessionId)
+    : mCblk(NULL),
+      mStatus(NO_INIT),
+      mIsTimed(false),
+      mPreviousPriority(ANDROID_PRIORITY_NORMAL), mPreviousSchedulingGroup(SP_DEFAULT)
+#ifdef QCOM_HARDWARE
+      ,mAudioFlinger(NULL),
+      mObserver(NULL)
+#endif
+{
+    mStatus = set((audio_stream_type_t)streamType, sampleRate, (audio_format_t)format,
+            (audio_channel_mask_t) channelMask,
+	    frameCount, (audio_output_flags_t)flags, cbf, user, notificationFrames,
+	    0 /*sharedBuffer*/, false /*threadCanCallJava*/, sessionId);
+}
 
 AudioTrack::AudioTrack()
     : mStatus(NO_INIT),
-- 
1.9.1

